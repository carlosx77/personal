/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
	mavenLocal()
	mavenCentral()
	maven { url "http://repo.spring.io/release" }
	maven { url "http://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/libs-snapshot" }
	maven { url "http://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/libs-milestone" }
}

ext {
	//spring libs
	springVersion = '5.0.10.RELEASE'
	springDataVersion = '2.0.11.RELEASE'
	bootVersion = '2.0.6.RELEASE'
	
	//Database
	//mariaDbVersion = '2.4.3'
	//dbcpVersion = '2.1'
	h2Version =  '1.4.194'
	mysqlVersion = '8.0.17'
	
	//persistance libs
	hibernateVersion = '5.4.0.Final'
	hibernateJpaVersion = '1.0.0.Final'
	atomikosVersion = '4.0.4' //JTA transaction manager for standalone app or web container environment (for use in a non JEE env)
	
	//logging libs
	slf4jVersion = '1.7.25'
	logbackVersion = '1.2.3'
	
	guavaVersion = '21.0'
	
	
	spring = [
			context           : "org.springframework:spring-context:$springVersion",
			webmvc            : "org.springframework:spring-webmvc:$springVersion",
			aop               : "org.springframework:spring-aop:$springVersion",
			aspects           : "org.springframework:spring-aspects:$springVersion",
			tx                : "org.springframework:spring-tx:$springVersion",
			jdbc              : "org.springframework:spring-jdbc:$springVersion",
			contextSupport    : "org.springframework:spring-context-support:$springVersion",
			orm               : "org.springframework:spring-orm:$springVersion",
			data              : "org.springframework.data:spring-data-jpa:$springDataVersion",
			test              : "org.springframework:spring-test:$springVersion",
			jms               : "org.springframework:spring-jms:$springVersion",
			oxm               : "org.springframework:spring-oxm:$springVersion",
			webSocket         : "org.springframework:spring-websocket:$springVersion",
			messaging         : "org.springframework:spring-messaging:$springVersion",
			webflux           : "org.springframework:spring-webflux:$springVersion"
	]
	
	boot = [
			springBootPlugin: "org.springframework.boot:spring-boot-gradle-plugin:$bootVersion",
			starter         : "org.springframework.boot:spring-boot-starter:$bootVersion",
			starterWeb      : "org.springframework.boot:spring-boot-starter-web:$bootVersion",
			actuator        : "org.springframework.boot:spring-boot-starter-actuator:$bootVersion",
			starterTest     : "org.springframework.boot:spring-boot-starter-test:$bootVersion",
			starterAop      : "org.springframework.boot:spring-boot-starter-aop:$bootVersion",
			starterJdbc     : "org.springframework.boot:spring-boot-starter-jdbc:$bootVersion",
			starterJpa      : "org.springframework.boot:spring-boot-starter-data-jpa:$bootVersion",
			starterJta      : "org.springframework.boot:spring-boot-starter-jta-atomikos:$bootVersion",
			starterJms      : "org.springframework.boot:spring-boot-starter-artemis:$bootVersion",
			starterRabbitmq : "org.springframework.boot:spring-boot-starter-amqp:$bootVersion",
			starterThyme    : "org.springframework.boot:spring-boot-starter-thymeleaf:$bootVersion",
			starterSecurity : "org.springframework.boot:spring-boot-starter-security:$bootVersion",
			starterBatch    : "org.springframework.boot:spring-boot-starter-batch:$bootVersion",
			starterWebflux  : "org.springframework.boot:spring-boot-starter-webflux:$bootVersion"
	]
		
	db = [
			//mariaDb : "org.mariadb.jdbc:mariadb-java-client:$mariaDbVersion",
			//dbcp2 : "org.apache.commons:commons-dbcp2:$dbcpVersion",
			//dbcp  : "commons-dbcp:commons-dbcp:1.4"
			mysql : "mysql:mysql-connector-java:$mysqlVersion",
			h2:"com.h2database:h2:$h2Version"
			
	]
	
	hibernate = [
		em : "org.hibernate:hibernate-entitymanager:$hibernateVersion",
	    validator: "org.hibernate:hibernate-validator:5.1.3.Final",
	    ehcache : "org.hibernate:hibernate-ehcache:$hibernateVersion",
	    jpaModelGen: "org.hibernate:hibernate-jpamodelgen:$hibernateVersion",
	    jpaApi     : "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:$hibernateJpaVersion",
	    querydslapt: "com.mysema.querydsl:querydsl-apt:2.7.1",
	    tx         : "com.atomikos:transactions-hibernate4:$atomikosVersion"
  	]
	
	misc = [
		slf4jJcl       : "org.slf4j:jcl-over-slf4j:$slf4jVersion",
		//aspectjweaver  : "org.aspectj:aspectjweaver:$aspectjVersion",
		lang3          : "org.apache.commons:commons-lang3:3.5",  //to use Not Implemented Exception
		guava          : "com.google.guava:guava:$guavaVersion",
		logback        : "ch.qos.logback:logback-classic:$logbackVersion"
	]
}


dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.

    compile hibernate.jpaApi,hibernate.querydslapt,hibernate.em,hibernate.tx
    compile spring.orm,spring.context,spring.data
    compile misc.slf4jJcl,misc.logback,misc.lang3 //,misc.aspectjweaver
    compile db.mysql, db.h2
    

    //compile project (':MySpringTransactionAnnotations')
    
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}
